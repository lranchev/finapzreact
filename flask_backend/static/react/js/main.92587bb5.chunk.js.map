{"version":3,"sources":["Components/Chart.js","Components/Radiobutton.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Chart","props","state","chartData","labels","chart_label","datasets","label","data","chart_data","backgroundColor","className","this","width","height","options","title","display","displayTitle","text","chart_title","fontSize","legend","displayLegend","position","legendPosition","Component","defaultProps","location","useStyles","makeStyles","root","icon","borderRadius","boxShadow","backgroundImage","outline","outlineOffset","background","checkedIcon","content","StyledRadio","classes","Radio","disableRipple","color","clsx","CustomizedRadios","fetchDataFromFlas","FormControl","component","FormLabel","RadioGroup","defaultValue","aria-label","name","onChange","FormControlLabel","value","control","App","React","useState","radioButtonValue","setRadioButtonValue","event","target","console","log","window","chart1","chart2","chart3","chart4","src","logo","alt","href","rel","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"js/main.92587bb5.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Bar, Line, Pie} from 'react-chartjs-2';\r\n\r\nclass Chart extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n     chartData:{\r\n           labels: this.props.chart_label,\r\n           datasets:[\r\n            {\r\n            label:'Closing price',\r\n            data:this.props.chart_data,\r\n            backgroundColor:[\r\n            'rgba(255, 99, 132, 0.6)'\r\n             ],\r\n\r\n             }\r\n           ]\r\n      }\r\n    }\r\n  }\r\n\r\n  static defaultProps = {\r\n    displayTitle:true,\r\n    displayLegend:true,\r\n    legendPosition:'right',\r\n    location:'City_stock'\r\n  }\r\n    render (){\r\n         return (\r\n            <div className=\"chart\">\r\n\r\n\r\n                <Line\r\n                  data={this.state.chartData}\r\n                  width={900}\r\n                  height={400}\r\n                  options={{\r\n                    title:{\r\n                        display:this.props.displayTitle,\r\n                        text:this.props.chart_title,\r\n                        fontSize:25\r\n                    },\r\n                    legend:{\r\n                        display:this.props.displayLegend,\r\n                        position:this.props.legendPosition\r\n                    }\r\n                  }}\r\n                />\r\n\r\n            </div>\r\n         )\r\n    }\r\n\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\nimport clsx from 'clsx';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Radio from '@material-ui/core/Radio';\r\nimport RadioGroup from '@material-ui/core/RadioGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormLabel from '@material-ui/core/FormLabel';\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    '&:hover': {\r\n      backgroundColor: 'transparent',\r\n    },\r\n  },\r\n  icon: {\r\n    borderRadius: '50%',\r\n    width: 16,\r\n    height: 16,\r\n    boxShadow: 'inset 0 0 0 1px rgba(16,22,26,.2), inset 0 -1px 0 rgba(16,22,26,.1)',\r\n    backgroundColor: '#f5f8fa',\r\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.8),hsla(0,0%,100%,0))',\r\n    '$root.Mui-focusVisible &': {\r\n      outline: '2px auto rgba(19,124,189,.6)',\r\n      outlineOffset: 2,\r\n    },\r\n    'input:hover ~ &': {\r\n      backgroundColor: '#ebf1f5',\r\n    },\r\n    'input:disabled ~ &': {\r\n      boxShadow: 'none',\r\n      background: 'rgba(206,217,224,.5)',\r\n    },\r\n  },\r\n  checkedIcon: {\r\n    backgroundColor: '#137cbd',\r\n    backgroundImage: 'linear-gradient(180deg,hsla(0,0%,100%,.1),hsla(0,0%,100%,0))',\r\n    '&:before': {\r\n      display: 'block',\r\n      width: 16,\r\n      height: 16,\r\n      backgroundImage: 'radial-gradient(#fff,#fff 28%,transparent 32%)',\r\n      content: '\"\"',\r\n    },\r\n    'input:hover ~ &': {\r\n      backgroundColor: '#106ba3',\r\n    },\r\n  },\r\n});\r\n\r\n// Inspired by blueprintjs\r\nfunction StyledRadio(props) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Radio\r\n      className={classes.root}\r\n      disableRipple\r\n      color=\"default\"\r\n      checkedIcon={<span className={clsx(classes.icon, classes.checkedIcon)} />}\r\n      icon={<span className={classes.icon} />}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport default function CustomizedRadios({ fetchDataFromFlas }) {\r\n  return (\r\n    <FormControl component=\"fieldset\">\r\n      <FormLabel component=\"legend\">Stock picker:</FormLabel>\r\n      <RadioGroup defaultValue=\"akamai\" aria-label=\"stock_pick\" name=\"customized-radios\" onChange={fetchDataFromFlas}>\r\n        <FormControlLabel value=\"akamai\" control={<StyledRadio />} label=\"AKAM Stock\" />\r\n        <FormControlLabel value=\"amazon\" control={<StyledRadio />} label=\"AMZN Stock\" />\r\n      </RadioGroup>\r\n    </FormControl>\r\n  );\r\n}","import React, {Component} from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport he from 'he'\r\nimport Chart from './Components/Chart';\r\nimport CustomizedRadios from './Components/Radiobutton';\r\n\r\nfunction App() {\r\n  const [radioButtonValue, setRadioButtonValue] = React.useState('amazon');\r\n\r\n  function fetchDataFromFlas(event) {\r\n    setRadioButtonValue(event.target.value);\r\n    if(radioButtonValue === \"amazon\") {\r\n      //todo fetch data for amazon\r\n      console.log('amazon');\r\n    } else {\r\n      //todo data for akamai\r\n      console.log('akamai');\r\n    }\r\n  }\r\n\r\n\r\n \r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n\r\n\r\n       <CustomizedRadios fetchDataFromFlas={fetchDataFromFlas} />\r\n       <Chart chart_label={window.chart1} chart_data={window.chart2} chart_title=\"Test Amazon Stock\" />\r\n\r\n      {/*<p>The last 10 dates pulled from the API are as follows: {he.decode(window.chart1)}</p>*/}\r\n      {/*<p>The last 10 closing prices pulled from the API are as follows: {he.decode(window.chart2)}</p>*/}\r\n\r\n       <Chart chart_label={window.chart3} chart_data={window.chart4} chart_title=\"Test Akamai Stock\"/>\r\n\r\n       {/*<p>The last 10 dates pulled from the API are as follows: {he.decode(window.chart3)}</p>*/}\r\n       {/*<p>The last 10 closing prices pulled from the API are as follows: {he.decode(window.chart4)}</p>*/}\r\n\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\r\n\r\n\r\n\r\n      <a\r\n          className=\"App-link\"\r\n          href=\"https://cnbc.com\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Check the latest business news\r\n        </a>\r\n\r\n      </header>\r\n    </div>\r\n  );\r\n\r\n\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"media/logo.ee7cd8ed.svg\";"],"sourceRoot":""}