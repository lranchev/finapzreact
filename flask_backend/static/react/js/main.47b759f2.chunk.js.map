{"version":3,"sources":["Components/Chart.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Chart","props","state","chartData","labels","token3","datasets","label","data","token4","backgroundColor","className","this","width","height","options","title","display","displayTitle","text","fontSize","legend","displayLegend","position","legendPosition","Component","defaultProps","location","App","window","src","logo","alt","he","decode","token","token2","href","target","rel","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"gQAGMA,E,YACJ,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KACDC,MAAQ,CACZC,UAAU,CACJC,OAAQ,EAAKH,MAAMI,OACnBC,SAAS,CACR,CACAC,MAAM,gBACNC,KAAK,EAAKP,MAAMQ,OAChBC,gBAAgB,CAChB,+BAVQ,E,sEA0BX,OACG,yBAAKC,UAAU,SAGX,kBAAC,IAAD,CACEH,KAAMI,KAAKV,MAAMC,UACjBU,MAAO,IACPC,OAAQ,IACRC,QAAS,CACPC,MAAM,CACFC,QAAQL,KAAKX,MAAMiB,aACnBC,KAAK,eACLC,SAAS,IAEbC,OAAO,CACHJ,QAAQL,KAAKX,MAAMqB,cACnBC,SAASX,KAAKX,MAAMuB,wB,GA3CxBC,aAAdzB,EAoBG0B,aAAe,CACpBR,cAAa,EACbI,eAAc,EACdE,eAAe,QACfG,SAAS,cA8BE3B,QCdA4B,MAlCf,WAGE,OACE,yBAAKjB,UAAU,OACb,4BAAQA,UAAU,cAIjB,kBAAC,EAAD,CAAON,OAAQwB,OAAOxB,OAAQI,OAAQoB,OAAOpB,SAC5C,yBAAKqB,IAAKC,IAAMpB,UAAU,WAAWqB,IAAI,SAE1C,mFAAyDC,IAAGC,OAAOL,OAAOM,QAC1E,0FAAgEN,OAAOxB,QACvE,4FAAkE4B,IAAGC,OAAOL,OAAOO,SACnF,mGAAyEP,OAAOpB,QAGjF,uBACIE,UAAU,WACV0B,KAAK,mBACLC,OAAO,SACPC,IAAI,uBAJR,qCCfcC,QACW,cAA7BX,OAAOF,SAASc,UAEe,UAA7BZ,OAAOF,SAASc,UAEhBZ,OAAOF,SAASc,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,mBErInBC,EAAOC,QAAU,IAA0B,2B","file":"js/main.47b759f2.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {Bar, Line, Pie} from 'react-chartjs-2';\r\n\r\nclass Chart extends Component{\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n     chartData:{\r\n           labels: this.props.token3,\r\n           datasets:[\r\n            {\r\n            label:'Closing price',\r\n            data:this.props.token4,\r\n            backgroundColor:[\r\n            'rgba(255, 99, 132, 0.6)'\r\n             ],\r\n\r\n             }\r\n           ]\r\n      }\r\n    }\r\n  }\r\n\r\n  static defaultProps = {\r\n    displayTitle:true,\r\n    displayLegend:true,\r\n    legendPosition:'right',\r\n    location:'City_stock'\r\n  }\r\n    render (){\r\n         return (\r\n            <div className=\"chart\">\r\n\r\n\r\n                <Line\r\n                  data={this.state.chartData}\r\n                  width={900}\r\n                  height={400}\r\n                  options={{\r\n                    title:{\r\n                        display:this.props.displayTitle,\r\n                        text:'Akamai Stock',\r\n                        fontSize:25\r\n                    },\r\n                    legend:{\r\n                        display:this.props.displayLegend,\r\n                        position:this.props.legendPosition\r\n                    }\r\n                  }}\r\n                />\r\n\r\n            </div>\r\n         )\r\n    }\r\n\r\n}\r\n\r\nexport default Chart;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport he from 'he'\nimport Chart from './Components/Chart';\n\n\n\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n\n\n\n       <Chart token3={window.token3} token4={window.token4} />\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n\n       <p>The last 4 dates pulled from the API are as follows: {he.decode(window.token)}</p>\n       <p>Array: The last 4 dates pulled from the API are as follows: {window.token3}</p>\n       <p>The last 4 closing prices pulled from the API are as follows: {he.decode(window.token2)}</p>\n       <p>Array: The last 4 closing prices pulled from the API are as follows: {window.token4}</p>\n\n\n      <a\n          className=\"App-link\"\n          href=\"https://cnbc.com\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Check the latest business news\n        </a>\n\n      </header>\n    </div>\n  );\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"media/logo.5d5d9eef.svg\";"],"sourceRoot":""}